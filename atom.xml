<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YongSir</title>
  <subtitle>专业程序员伪装者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://13hoop.github.io/"/>
  <updated>2016-03-29T09:58:42.000Z</updated>
  <id>http://13hoop.github.io/</id>
  
  <author>
    <name>13hoop</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://13hoop.github.io/2016/03/29/hello-world/"/>
    <id>http://13hoop.github.io/2016/03/29/hello-world/</id>
    <published>2016-03-29T09:58:42.000Z</published>
    <updated>2016-03-29T09:58:42.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tips</title>
    <link href="http://13hoop.github.io/2015/04/29/329/"/>
    <id>http://13hoop.github.io/2015/04/29/329/</id>
    <published>2015-04-29T12:01:40.000Z</published>
    <updated>2016-03-30T09:25:10.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;tips&quot;&gt;&lt;a href=&quot;#tips&quot; class=&quot;headerlink&quot; title=&quot;tips&quot;&gt;&lt;/a&gt;tips&lt;/h2&gt;&lt;h3 id=&quot;地图效果实现，demo验证&quot;&gt;&lt;a href=&quot;#地图效果实现，demo验证&quot; class=&quot;headerlink&quot; title=&quot;地图效果实现，demo验证&quot;&gt;&lt;/a&gt;地图效果实现，demo验证&lt;/h3&gt;&lt;p&gt; 使用scrollView，在缩放过程中，通过仿射参数（a或者d）和最大zoom值的比例，来确定percent，从而设置Interaction的进度，实现双手捏合等放地图交互。&lt;/p&gt;
&lt;h3 id=&quot;项目框架搭建&quot;&gt;&lt;a href=&quot;#项目框架搭建&quot; class=&quot;headerlink&quot; title=&quot;项目框架搭建&quot;&gt;&lt;/a&gt;项目框架搭建&lt;/h3&gt;&lt;p&gt;准备阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主业务逻辑清楚（8成）&lt;/li&gt;
&lt;li&gt;数据组织形式（待定）&lt;/li&gt;
&lt;li&gt;数据流向&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;请求部分： 从业务部分，通过统一接口发送请求&lt;/p&gt;
&lt;p&gt;响应部分： 从网络获取到原始数据（JSON），由Manager实例保管，Manager实现reformManagerData协议，直接得到最合适的view需要的具体化model，实现数据展示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;工具类组合：包含分类和独立协议 ＋ 常用单利&lt;/li&gt;
&lt;li&gt;第三方框架，交由pod统一管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;尽量避免的蛋疼的JSON解析，原数据：&quot;&gt;&lt;a href=&quot;#尽量避免的蛋疼的JSON解析，原数据：&quot; class=&quot;headerlink&quot; title=&quot;尽量避免的蛋疼的JSON解析，原数据：&quot;&gt;&lt;/a&gt;尽量避免的蛋疼的JSON解析，原数据：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://host/index.php?c=recommend_ctrl&amp;amp;m=get_tag_level_page_data&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://host/index.php?c=recommend_ctrl&amp;amp;m=get_tag_level_page_data&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/img/329_01.png&quot; alt=&quot;关系树&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先是数据的层级关系，存储字段为tag_level，只存储层级关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中root_tag的为第一层级所有的id&lt;/li&gt;
&lt;li&gt;余下以第一层id为key，存储下一层级的科目id&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/329_02.png&quot; alt=&quot;关系树&quot;&gt;&lt;br&gt;具体的所有数据都在tag_meta中，共93组，每组由id为key，对应一个字典&lt;/p&gt;
&lt;p&gt;所以需要&lt;br&gt;第一，将tag_meta所有数据加载到内存，以便于根据id去获取，并且生命周期要保持至少2个层级控制器，所以需要一个从网络获取的原始数据字典&lt;br&gt;第二，对于每一个控制器itemList中，直接可用的是每层的title&lt;/p&gt;
&lt;h3 id=&quot;UIButton&quot;&gt;&lt;a href=&quot;#UIButton&quot; class=&quot;headerlink&quot; title=&quot;UIButton&quot;&gt;&lt;/a&gt;UIButton&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在system下，设置background无效，而要更换为custom&lt;br&gt;另外系统并未提供setBackground：forState方法，所以自己添加一个分类实现之：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;UIButton+UIButtonColor.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIButton&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;FillColor&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setBackgroundColor:(&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *)backgroundColor forState:(&lt;span class=&quot;built_in&quot;&gt;UIControlState&lt;/span&gt;)state &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setBackgroundImage:[&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; imageWithColor:backgroundColor] forState:state];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *)imageWithColor:(&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *)color &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; rect = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIGraphicsBeginImageContext&lt;/span&gt;(rect.size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGContextRef&lt;/span&gt; context = &lt;span class=&quot;built_in&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGContextSetFillColorWithColor&lt;/span&gt;(context, [color &lt;span class=&quot;built_in&quot;&gt;CGColor&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGContextFillRect&lt;/span&gt;(context, rect);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *image = &lt;span class=&quot;built_in&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIGraphicsEndImageContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; image;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;UIButton的边框和倒角,对&lt;code&gt;layer&lt;/code&gt;操作是最方便的&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;tips&quot;&gt;&lt;a href=&quot;#tips&quot; class=&quot;headerlink&quot; title=&quot;tips&quot;&gt;&lt;/a&gt;tips&lt;/h2&gt;&lt;h3 id=&quot;地图效果实现，demo验证&quot;&gt;&lt;a href=&quot;#地图效果实现，demo验证&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="tips, 开发" scheme="http://13hoop.github.io/tags/tips-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>algs001-《算法》4th笔记</title>
    <link href="http://13hoop.github.io/2015/04/05/algs001/"/>
    <id>http://13hoop.github.io/2015/04/05/algs001/</id>
    <published>2015-04-05T07:11:46.000Z</published>
    <updated>2016-03-30T08:00:28.000Z</updated>
    
    <content type="html">&lt;h6 id=&quot;《算法》4th笔记&quot;&gt;&lt;a href=&quot;#《算法》4th笔记&quot; class=&quot;headerlink&quot; title=&quot;《算法》4th笔记&quot;&gt;&lt;/a&gt;《算法》4th笔记&lt;/h6&gt;&lt;h2 id=&quot;第一章-基础&quot;&gt;&lt;a href=&quot;#第一章-基础&quot; class=&quot;headerlink&quot; title=&quot;第一章 基础&quot;&gt;&lt;/a&gt;第一章 基础&lt;/h2&gt;&lt;p&gt;  利用这段时间，借助这本大作把该补的全部补上。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  本书以Java为例,一个典型的Java类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(packageName)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;(optional) &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassName&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FatherClass&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;implement&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterfaceName&lt;/span&gt;｛&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  构造函数；（默认自动创建）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title&quot;&gt;static&lt;/span&gt; 类变量；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title&quot;&gt;static&lt;/span&gt; 类方法；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  成员变量；（实例变量）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  成员函数；（成员方法）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;｝&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;从一个计数器类开始 － Counter&lt;br&gt;当我们声明一个Counter类型的变量时，发生了什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Counter heads;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;对象&lt;/em&gt; 是能承接数据类型的值的实体，具有以下三个特征：&lt;em&gt;状态&lt;/em&gt; &lt;em&gt;标示&lt;/em&gt; 和 &lt;em&gt;行为&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;对象的状态  | 数据类型中的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对象的标识  | 能将每个对象区分，可以理解为内存中的位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对象的行为  | 数据类型的操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;file:///Users/YongRen/algs4/1.2.1.png&quot; alt=&quot;对象的表示&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;基础部分就不按照书上介绍的来了，有其他oop经验，快速入手分将以下问题各个击破即可开始本书的阅读，至于继承多态流程控制之类的就不废话了：&lt;/p&gt;
&lt;h3 id=&quot;基础观感&quot;&gt;&lt;a href=&quot;#基础观感&quot; class=&quot;headerlink&quot; title=&quot;基础观感&quot;&gt;&lt;/a&gt;基础观感&lt;/h3&gt;&lt;h4 id=&quot;1-没有什么比直接上代码给合适的说明这个问题了：&quot;&gt;&lt;a href=&quot;#1-没有什么比直接上代码给合适的说明这个问题了：&quot; class=&quot;headerlink&quot; title=&quot;1. 没有什么比直接上代码给合适的说明这个问题了：&quot;&gt;&lt;/a&gt;1. 没有什么比直接上代码给合适的说明这个问题了：&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloJava&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.Out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;文件保存为 &lt;code&gt;HelloJava.java&lt;/code&gt;，源文件名必须和类名一致即 ClassName.java&lt;/li&gt;
&lt;li&gt;编译：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;javac&lt;/strong&gt; HelloJava.java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 编译完成，对应目录之下生成&lt;code&gt;HelloJava.class&lt;/code&gt;文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行：在对应的目录之下有java虚拟机运行&lt;code&gt;.class&lt;/code&gt;文件&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;java&lt;/strong&gt; HelloJava&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以看到程序入口就是&lt;code&gt;public static void main(String[] args)&lt;/code&gt;方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个源文件可以有多个&lt;code&gt;Class&lt;/code&gt;，但只能有一个&lt;code&gt;public&lt;/code&gt;的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-修饰符&quot;&gt;&lt;a href=&quot;#2-修饰符&quot; class=&quot;headerlink&quot; title=&quot;2. 修饰符&quot;&gt;&lt;/a&gt;2. 修饰符&lt;/h4&gt;&lt;p&gt;Java中的修饰符根所有oop设计一样，有&lt;code&gt;访问修饰符&lt;/code&gt;和&lt;code&gt;非访问修饰符&lt;/code&gt;2种&lt;br&gt;主要要说明的是&lt;code&gt;非访问修饰符&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; : 静态变量和静态方法的修饰符，也就是用于创建&lt;code&gt;类方法&lt;/code&gt;,&lt;code&gt;类变量&lt;/code&gt;，所声明自然是在静态区，不管多少对象，全局一份不多余分配&lt;br&gt;&lt;code&gt;final&lt;/code&gt;  : 不同情况有一些差别，但总体是有表达“这是无法改变的意思”，细微的差别常常令人困惑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三种使用final的情况：数据，方法和类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;final 数据 - 告知编译器一块数据是恒定不变的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同&lt;code&gt;public + static&lt;/code&gt;配合作为全局常量，并且变量名要大写和初始化，eg：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;static final PRICE = 0;```&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 如果是对象的final了,表示引用的恒定不变，eg：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ```java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  final ClassName a = new ClassName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = new ClassName(); // Error: Cannot change reference&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;final方法 － 可被继承但不能修改，&lt;code&gt;private&lt;/code&gt;默认会带上final&lt;/li&gt;
&lt;li&gt;final类 － 类不可被继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;abstract&lt;/code&gt; : 抽象的自身都不能实现，抽象类也可以包含非抽象方法，但抽象方法有一个那这个类就必须是抽象类，一旦子类继承了就需要全部实现&lt;/p&gt;
&lt;p&gt;还有其他线程相关的修饰符暂且搁下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类的设计：如计数器Counter的设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Stream，File及IO&quot;&gt;&lt;a href=&quot;#Stream，File及IO&quot; class=&quot;headerlink&quot; title=&quot;Stream，File及IO&quot;&gt;&lt;/a&gt;Stream，File及IO&lt;/h4&gt;&lt;p&gt;基本都在&lt;code&gt;Java.io&lt;/code&gt;中&lt;/p&gt;
&lt;h4 id=&quot;1-控制台IO-－-System-in-System-out&quot;&gt;&lt;a href=&quot;#1-控制台IO-－-System-in-System-out&quot; class=&quot;headerlink&quot; title=&quot;1 控制台IO － System.in System.out&quot;&gt;&lt;/a&gt;1 控制台IO － &lt;code&gt;System.in&lt;/code&gt; &lt;code&gt;System.out&lt;/code&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IODemo2&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// read() 读取字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//            IODemo2.charRead();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// readLine() 读取字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            IODemo2.stringRead();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;charRead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            BufferedReader br = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(System.in));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;请输入文字，并以&#39;q&#39;结束&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    c = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;) br.read();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(c != &lt;span class=&quot;string&quot;&gt;&#39;q&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stringRead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            BufferedReader br = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(System.in));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;请输入字符串，并以“q”结束&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                str = br.readLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.println(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!str.equals(&lt;span class=&quot;string&quot;&gt;&quot;q&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然与&lt;code&gt;read()&lt;/code&gt;对应的是&lt;code&gt;write()&lt;/code&gt;,但都习惯使用更方便的&lt;code&gt;print()&lt;/code&gt;，当然要是硬要用&lt;code&gt;System.out.write(&amp;#39;a&amp;#39;)&lt;/code&gt;输出字符‘a’的话也可以的&lt;/p&gt;
&lt;h4 id=&quot;2-文件IO&quot;&gt;&lt;a href=&quot;#2-文件IO&quot; class=&quot;headerlink&quot; title=&quot;2 文件IO&quot;&gt;&lt;/a&gt;2 文件IO&lt;/h4&gt;&lt;p&gt;文件的io,先是Java中系统文件读写包，还是看例子&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileStreamDemo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(String[] avgs)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//        FileStreamDemo.fileWriter();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FileStreamDemo.fileReader();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 写入文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fileWriter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 1 构建FileOutputStream对象，如果没有文件会自动创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        File f = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;string&quot;&gt;&quot;HelloJava.txt&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FileOutputStream fop = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 2 构建指定编码的OutputStreamWriter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        OutputStreamWriter writer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OutputStreamWriter(fop, &lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        writer.append(&lt;span class=&quot;string&quot;&gt;&quot;输入内容：\r\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        writer.append(&lt;span class=&quot;string&quot;&gt;&quot;hello java，this has been write to file！ &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        writer.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fop.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 读文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fileReader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 1 构建FileInputStream对象，如果没有文件会自动创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        File f = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;string&quot;&gt;&quot;HelloJava.txt&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FileInputStream fip = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 2 构建指定编码的InputStreamReader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        InputStreamReader reader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(fip, &lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 3 写入buffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuffer sb = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(reader.ready()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sb.append((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;)reader.read());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(sb.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reader.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fip.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                      ｜--
｜－－ OutputStream－－｜--
｜                    ｜--
｜
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Object&lt;br&gt;      ｜&lt;br&gt;      ｜                    ｜–&lt;br&gt;      ｜－－ InputStream －－｜ –&lt;br&gt;                            ｜–&lt;/p&gt;
&lt;h4 id=&quot;3-本书中的IO&quot;&gt;&lt;a href=&quot;#3-本书中的IO&quot; class=&quot;headerlink&quot; title=&quot;3 本书中的IO&quot;&gt;&lt;/a&gt;3 本书中的IO&lt;/h4&gt;&lt;p&gt;本书使用的是&lt;strong&gt;Wayne&lt;/strong&gt;为课程专门提供的StdIn和StdOut两个包以及&lt;code&gt;In``Out&lt;/code&gt;等类，都在&lt;code&gt;algs4.jar&lt;/code&gt;中包含&lt;br&gt;提供的包简化了文件IO的操作，可使用命令行重定向指定文件的输入输出,还可以管道输入，eg：&lt;br&gt;&lt;img src=&quot;file:///Users/YongRen/algs4/1.1.5.png&quot; alt=&quot;命令行的重定向和管道&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要其他API，可自行查找，下面给出一个用&lt;code&gt;二分法&lt;/code&gt;,做&lt;em&gt;白名单&lt;/em&gt;过滤的Demo&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Arrays;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BinarySearch&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * This class should not be instantiated.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BinarySearch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lo = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hi = a.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (lo &amp;lt;= hi) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = lo + (hi - lo) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;      (key &amp;lt; a[mid]) hi = mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key &amp;gt; a[mid]) lo = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; indexOf(a, key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 1 从文件读取整数放倒数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        In in = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; In(args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] whitelist = in.readAllInts();   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 2 数组排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Arrays.sort(whitelist);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 3 从终端输入要查询的数字key，如果不在白名单中就输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!StdIn.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key = StdIn.readInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BinarySearch.indexOf(whitelist, key) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                StdOut.println(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// - 打印出输入的对照白名单文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.printf(&lt;span class=&quot;string&quot;&gt;&quot; totol length: %d  \n  &quot;&lt;/span&gt;, whitelist.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; whitelist.length; i ++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(whitelist[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在用小数据测试时，可以打印输出，要是大文件就别作了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二分法，先排序，这里使用&lt;code&gt;Arrays.sort()&lt;/code&gt;排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查找改为使用&lt;code&gt;递归&lt;/code&gt;，看起来会更加简洁和优雅，故将现有的&lt;code&gt;rank()&lt;/code&gt;函数替换为：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] a)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; rank(key, a, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, a.length -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lo, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hi)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (lo &amp;gt; hi) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = lo + (hi - lo) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key &amp;lt; a[mid])      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; rank(key , a, lo, mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key &amp;gt; a[mid]) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; rank(key, a, mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, hi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;                   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a[mid];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;递归就是数学归纳法&lt;/em&gt;,并且：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;递归总要有最简单的情况&lt;/p&gt;
&lt;p&gt;递归总是趋近于一个更加简单的情况&lt;/p&gt;
&lt;p&gt;递归嵌套时，各个子问题不能根父问题不能有交集&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;《算法》4th笔记&quot;&gt;&lt;a href=&quot;#《算法》4th笔记&quot; class=&quot;headerlink&quot; title=&quot;《算法》4th笔记&quot;&gt;&lt;/a&gt;《算法》4th笔记&lt;/h6&gt;&lt;h2 id=&quot;第一章-基础&quot;&gt;&lt;a href=&quot;#第一章-基础&quot; class=&quot;head
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CoreData(二)</title>
    <link href="http://13hoop.github.io/2015/03/13/CoreData-%E4%BA%8C/"/>
    <id>http://13hoop.github.io/2015/03/13/CoreData-二/</id>
    <published>2015-03-13T09:28:07.000Z</published>
    <updated>2016-03-30T11:46:38.000Z</updated>
    
    <content type="html">&lt;p&gt;上一篇中，已经体验了CoreData的基本使用，可以通过Xcode设计数据模型，可以对数据查询，增加，更改，但还不知道它的真正工作机制，而这将是这一篇的主要内容&lt;/p&gt;
&lt;p&gt;Core Data Stack，the stack is made up of four Core Data Classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NSManagedObjectModel - 托管对象模型&lt;/li&gt;
&lt;li&gt;NSPersistentStore － 持久化存储&lt;/li&gt;
&lt;li&gt;NSPersistentStoreCoordinator － 持久化存储协调器&lt;/li&gt;
&lt;li&gt;NSManagedObjectContext － 托管对象上下文&lt;br&gt;我们已经和上下文NSManagedObjectContext打过交道了，可想而知其他3个是相对底层的依赖在支援者上下文，所以还是老规矩借助一个Demo开始吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;what we do later&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rather than rely on the default starter template, you’ll build your own Core Data stack: a customizable “wrapper” around these classes that works as a unit.&lt;/p&gt;
&lt;p&gt;一个名叫”dog-walk”的小Demo，它可以保存你遛狗的时间日期并展示到tableView。不同的是，我们不再依赖Xcode的自动模版。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;不过再次之前，先要隆重寄出这4个&lt;strong&gt;关键类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;the mamaged object model&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NSManagedObjectModel represents each object type in your app’s data model, the properties they can have, and the relationship between them. Other parts of the Core Data stack use the model to create objects, store properties and save data.&lt;br&gt;NSManagedObjectModel表征应用的数据模型中每个对象的类型，以及对象包含的属性和各对象的关联关系，CoreData的其他部分使用model创建对象，保存属性和数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;the persistent store&lt;/strong&gt;&lt;br&gt;NSPersistentStore reads and writes data to whichever storage method you’ve decided to use. Core Data provides four types of NSPersistentStore out of the box: three atomic and one non-atomic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NSPersistentStore读写数据的方式，coreData提供了四种方式：&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;NSQLiteStoreType&lt;/code&gt;(default + nonatomic,backed by SQLite)&lt;br&gt;  &lt;code&gt;NSXMLStoreType&lt;/code&gt;(readable + atomic, blacked by XML File, but have a large memory footprint, so available on OS X)&lt;br&gt;  &lt;code&gt;NSBinaryStoreType&lt;/code&gt;(just like XML, large memory cost + atomic,blacked by a binary data file)&lt;br&gt;  &lt;code&gt;NSInMemoryStoreType&lt;/code&gt;(in-memory not really persistent, terminate disappears)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;the persistent store coordinator&lt;/strong&gt;&lt;br&gt;NSPersistentStoreCoordinator is the bridge between the managed object model and the persistent store. It is responsible for using the model and the persistent stores to do most of the hard work in Core Data. It understands the NSManagedObjectModel and knows how to send information to, and fetch information from, the NSPersistentStore.&lt;br&gt;NSPersistentStoreCoordinator also hides the implementation details of how your persistent store or stores are configured. This is useful for two reasons:&lt;ol&gt;
&lt;li&gt;NSManagedObjectContext (coming next!) doesn’t have to know if it’s saving to an SQLite database, XML file or even iCloud.&lt;/li&gt;
&lt;li&gt;If you have multiple persistent stores, the persistent store coordinator presents a unified interface to the managed context. As far as the managed context is concerned, it always interacts with a single, aggregate persistent store.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;NSPersistentStoreCoordinator&lt;/code&gt;负责桥接托管对象模型和持久化储存，负责model的使用和固化存储等艰难的工作，推断出“向NSPersistentStore发送信息”或者“从NSPersistentStore获取信息”等行为。NSPersistentStoreCoordinator还隐藏了怎样持久化存储的配置的具体实施细则。这样一来：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 上下文不需要关心数据固化的类型，不论是SQLite，XML或者其他类型；
2. 如果是多种类型混合使用，协调器就为上下文提供一个便于管理的统一接口。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;the managed object context&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;NSManagedObjectContext&lt;/code&gt; is an in-memory ‘scratchpad’, do all works within it, and any changes won’t affect the underlying data on disk until you call save() on the context.&lt;br&gt;上下文是一个内存中的暂存器，所有的工作都要用到它，任何变动在save()到上下文之前是不会影响到硬盘上的数据的。它是如此的重要请务必注意所以下特性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. The context manages the lifecycle of the objects that it creates or fetches. This lifecycle management includes powerful features such as faulting, inverse relationship handling and validation.
上下文管理着对象创建和获取的整个生命周期 －包含一些强大的特性如错误，逆向关系以及验证。
2. A managed object cannot exist without an associated context. In fact, a managed object and its context are so tightly coupled that every managed object keeps a reference to its context, which can be accessed like so:
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; employeeContext = employee.managedObjectContext&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;托管对象不能独立于其上下文而单独存在，他们是如此紧密的耦合，以致于我们约定以这样的命名和代码来获取它。
3. Contexts are very territorial; once a managed object has associated with a particular context, it will remain associated with the same context for the duration of its lifecycle.
上下文是非常自卫的（领土的，真不好翻译😓），一旦托管对象指定了一个上下文，那么在这个对象的整个生命周期都将和先前指定的上下文捆绑关联。
4. An application can use more than one context—most non-trivial Core Data applications fall into this category. Since a context is an in-memory scratch pad for what’s on disk, you can actually load the same Core Data object onto two different contexts simultaneously.
一个应用程序可以拥有不止一个上下文，许多优秀的应用都使用这一特性。因为它仅仅只是磁盘上内容在内存中的一个暂存，所以你大可以同时通过不同的上下文加载同一份CoreData对象。
5. A context is not thread safe. The same goes for a managed object—you can only interact with contexts and managed objects on the same thread in which they were created. Apple has provided many ways to work with contexts in multithreaded applications. You’ll read all about different concurrency models in Chapter 10, “Multiple Managed Object Contexts.”
上下文不是线程安全的，同样托管对象也不是，所以你正能在创建它们的同一线程中与他们交互。Apple也提供了很多种上下文在不同线程工作的机制，后面会介绍到。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;总之NSManagedObjectContext是一个强大，牛气，专业，忠诚而又脆弱的一片内存暂存。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇中，已经体验了CoreData的基本使用，可以通过Xcode设计数据模型，可以对数据查询，增加，更改，但还不知道它的真正工作机制，而这将是这一篇的主要内容&lt;/p&gt;
&lt;p&gt;Core Data Stack，the stack is made up of four Core
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CoreData(一)</title>
    <link href="http://13hoop.github.io/2015/03/12/CoreData-%E4%B8%80/"/>
    <id>http://13hoop.github.io/2015/03/12/CoreData-一/</id>
    <published>2015-03-12T09:28:07.000Z</published>
    <updated>2016-03-30T11:10:56.000Z</updated>
    
    <content type="html">&lt;h6 id=&quot;CoreData-and-Swift&quot;&gt;&lt;a href=&quot;#CoreData-and-Swift&quot; class=&quot;headerlink&quot; title=&quot;CoreData and Swift&quot;&gt;&lt;/a&gt;CoreData and Swift&lt;/h6&gt;&lt;p&gt;这是这本书Core Data by Tutorials的读书笔记，大大的封面&lt;br&gt;&lt;img src=&quot;/img/CoreData1_001_Top.png&quot; alt=&quot;大大的封面&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;section-one&quot;&gt;&lt;a href=&quot;#section-one&quot; class=&quot;headerlink&quot; title=&quot;section one&quot;&gt;&lt;/a&gt;section one&lt;/h2&gt;&lt;p&gt;First,why we need coreData？It matters data persistence.&lt;/p&gt;
&lt;p&gt;是啊，市场上有&lt;code&gt;SQL&lt;/code&gt;和&lt;code&gt;Realm&lt;/code&gt;这些简单易用的东西，谁还需要&lt;code&gt;coreData&lt;/code&gt;&lt;br&gt;但是&lt;code&gt;coreData&lt;/code&gt;比你想象的强大得多，最大的优势在于是苹果的亲儿子，全平台通用；而那些动则用其效率和操作的，我就补充一段&lt;code&gt;Marcus Zarra&lt;/code&gt;大神的回答：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;First, my opinion on third-party code is well known: all code sucks. I think Realm is trying to solve a problem that is the incorrect problem to solve. They’re trying to be faster than Core Data, whereas Core Data is trying to be fast enough, but maintainable. In my playing and working with Realm, I find that the amount of code you write is about equal. … As a project leader or a developer, I want maintainability and consistency. My big concern with third-party frameworks is that they go away. It happens over and over again. We don’t know how long Realm’s going to be here. I don’t understand their business model. Core Data for me is good enough; it’s mature, it’s been around long enough, and it’s fast enough. If it’s not fast enough, I’m probably doing something wrong because I’m in object space anyway. There’s a lot of unknowns about Realm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CoreData的意义在于数据的更灵活更高效的存储和处理，能够将数据固化时最起码的需求。干巴巴的学习没有任何意思，我们就从这个基本的需求入手，一个联系人的Demo，利用coreData实现信息从内存到本地的固化，并从本地读取。引述书中的要求：&lt;/p&gt;
&lt;p&gt;When you tap the Home button, the app that’s currently in the foreground goes to the background. When this happens, the operating system flash-freezes everything currently in memory, including the strings in the names array. Similarly, when it’s time to wake up and return to the foreground, the operating system restores what used to be in memory as if you’d never left.&lt;/p&gt;
&lt;p&gt;what we really want?&lt;br&gt;     to persist the names you enter so they’re available for viewing after a fresh app launch.&lt;/p&gt;
&lt;h4 id=&quot;－-The-first-step-is-to-create-a-managed-object-model&quot;&gt;&lt;a href=&quot;#－-The-first-step-is-to-create-a-managed-object-model&quot; class=&quot;headerlink&quot; title=&quot;－ The first step is to create a managed object model&quot;&gt;&lt;/a&gt;－ The first step is to create a managed object model&lt;/h4&gt;&lt;p&gt;Since you elected to use Core Data when you created the HitList project, Xcode automatically created a data model file for you and named it HitList.xcdatamodeld.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An entity is a class definition in Core Data. The classic example is an Employee or a Company. In a relational database, an entity corresponds to a table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An attribute is a piece of information attached to a particular entity. For example, an Employee entity could have attributes for the employee’s name, position and salary. In a database, an attribute corresponds to a particular field in a table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A relationship is a link between multiple entities. In Core Data, relationships between two entities are called to-one relationships, while those between one and many entities are called to-many relationships. For example, a Manager can have a to-many relationship with a set of employees, whereas an individual Employee will have a to-one relationship with his manager.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you’ve probably noticed, entities sound a lot like a classes. Likewise, attributes/relationships sound a lot like properties. What’s the difference? You can think of a Core Data entity as a class “definition” and the managed object as an instance of that class.&lt;/p&gt;
&lt;p&gt;首先，需要创建托管对象模型NSManagedObjectModel，就是指定义在.mom中的所有实体，操作中将我们的数据模型添加到它之中&lt;/p&gt;
&lt;p&gt;基本的概念：&lt;br&gt;&lt;em&gt;entity实体&lt;/em&gt;     ： 理解为数据库中的表，也就是一种类，如一个Class Employee或者Class Company&lt;br&gt;&lt;em&gt;attribute属性&lt;/em&gt; ： 理解为数据库表中的字段，也就是特定实体的具体信息，如一个Employee实体包含name，position，salary等属性&lt;br&gt;&lt;em&gt;relationship关系&lt;/em&gt;： 就是不同实体的关系，在coreData中，两个实体间叫有一对一关系，如果一个实体和多个实体之间，就称之为多对一关系。比如一个manager和employee之间就是对多关系，而一个employee 和manager就是对一的关系。&lt;/p&gt;
&lt;h4 id=&quot;－-Next-replace-the-table-view’s-model&quot;&gt;&lt;a href=&quot;#－-Next-replace-the-table-view’s-model&quot; class=&quot;headerlink&quot; title=&quot;－ Next, replace the table view’s model&quot;&gt;&lt;/a&gt;－ Next, replace the table view’s model&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// var names = [String]()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Change “names” to “people” and [String] to [NSManagedObject]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用强大的NSManagedObject实例，来替代简单的string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; people = [&lt;span class=&quot;type&quot;&gt;NSManagedObject&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;NSManagedObject&lt;/strong&gt; represents a single object stored in Core Data—you must use it to create, edit, save and delete from your Core Data persistent store. As you’ll see shortly, NSManagedObject is a shape-shifter. It can take the form of any entity in your data model, appropriating whatever attributes and relationships you defined.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Before you can save or retrieve anything from your Core Data store, you first need to get your hands on an NSManagedObjectContext. You can think of a managed object context as an in-memory “scratchpad” for working with managed objects.&lt;/li&gt;
&lt;li&gt;You create a new managed object and insert it into the managed object context. You can do this in one step with NSManagedObject’s designated initializer: init(entity:insertIntoManagedObjectContext:).&lt;/li&gt;
&lt;li&gt;With an NSManagedObject in hand, you set the name attribute using key-value coding. You have to spell the KVC key (“name” in this case) exactly as it appears on your data model, otherwise your app will crash at runtime.&lt;/li&gt;
&lt;li&gt;You commit your changes to person and save to disk by calling save on the managed object context. Note that save takes one parameter, which is a pointer to an NSError; if there is ever an error with the save operation, you can inspect the error and alert the user if necessary.&lt;/li&gt;
&lt;li&gt;Congratulations! Your new managed object is now safely ensconced in your Core Data persistent store. Insert the new managed object into the people array so that it shows up in the table view when it reloads.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其次，使用托管对象 &lt;em&gt;［NSManagedObject］&lt;/em&gt; 集合来替换tableView数据模型（这里的names）&lt;br&gt;托管对象NSManagedObject，就是我们拿来操作数据的基本单位。对应下来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加一条数据是在NSManagedObjectContext新建一个NSManagedObject。&lt;/li&gt;
&lt;li&gt;查找数据是查找NSManagedObject。&lt;/li&gt;
&lt;li&gt;修改是修改NSManagedObject类的属性。&lt;/li&gt;
&lt;li&gt;删除是从NSManagedObjectContext里面删除NSManagedObject类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后我们保存NSManagedObjectContext，然后一直向上传递到磁盘上面去，才是持久化的修改。总之，模型对象的数据被持有在NSManagedObject对象中。每一个NSManagedObject对象都对应一个实体（就像每一个对象都有一个类）。&lt;/p&gt;
&lt;p&gt;而对于NSManagedObject的操作又引出一个叫NSManagedObjectContext的东东，这是是我们经常使用到的一个类。对于为什么要有这个类，因为数据库的IO操作是很费时的，因此把一系列的操作缓存到了一个内存区域，等待合适的实际在去写入真实的磁盘中。这样大大的提高效率。比如插入一条数据，然后修改数据，最后删除掉这条数据，如果是每次都执行commit的话是操作三次IO，如果我们把这三条合并在一起commit的话就只有一次commit。这样能有效的提高整个系统的效率。NSManagedObjectContext就是为提供IO效率而在内存中的“暂存”。同时提前指出使用Core Data需要注意的是：NSManagedObjectContext并不是线程安全的，更多相关讨论先往后放。&lt;/p&gt;
&lt;h4 id=&quot;－-Fetching-from-CoreData&quot;&gt;&lt;a href=&quot;#－-Fetching-from-CoreData&quot; class=&quot;headerlink&quot; title=&quot;－ Fetching from CoreData&quot;&gt;&lt;/a&gt;－ Fetching from CoreData&lt;/h4&gt;&lt;p&gt;LoadData from coreData&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;before you can do anything with Core Data, you need a managed object context. Fetching is no different!&lt;/li&gt;
&lt;li&gt;Setting a fetch request’s entity property, or alternatively initializing it with init(entityName:), fetches all objects of a particular entity. This is what you do here to fetch all Person entities.&lt;br&gt;NSFetchRequest is the class responsible for fetching from Core Data.&lt;br&gt;Fetch requests have several qualifiers that refine the set of results they return.&lt;/li&gt;
&lt;li&gt;You hand the fetch request over to the managed object context to do the heavy lifting. executeFetchRequest(_:error:) returns an optional array of managed objects that meets the criteria specified by the fetch request.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;获取已保存的数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先要得到上下文&lt;/li&gt;
&lt;li&gt;设置fetchRequest&lt;/li&gt;
&lt;li&gt;根据请求从上下文获取数据并做数据处理&lt;br&gt;&lt;img src=&quot;/img/CoreData1_002.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;section-two&quot;&gt;&lt;a href=&quot;#section-two&quot; class=&quot;headerlink&quot; title=&quot;section two&quot;&gt;&lt;/a&gt;section two&lt;/h2&gt;&lt;p&gt;就创建一个小小的BowTie管理的demo，就是管理你的不同颜色的领结，UI和功能如下：&lt;br&gt;     segumentController － 可选颜色&lt;br&gt;     name  － 名称&lt;br&gt;     rante － 评分，从0-5&lt;br&gt;     times － 佩戴次数&lt;br&gt;     lastWorn － 上次佩戴的日期&lt;br&gt;     Favorite － 是否最爱&lt;br&gt;     wear － 增加佩戴次数和更新佩戴日期&lt;br&gt;     rate － 评分允许你重新评分&lt;/p&gt;
&lt;p&gt;OK，What you have to do now is take this sample data, store it in Core Data and use it to implement the bow tie management functionality.&lt;/p&gt;
&lt;h4 id=&quot;Firstly-create-your-data-model&quot;&gt;&lt;a href=&quot;#Firstly-create-your-data-model&quot; class=&quot;headerlink&quot; title=&quot;Firstly ,create your data model&quot;&gt;&lt;/a&gt;Firstly ,create your data model&lt;/h4&gt;&lt;p&gt;在Bow&lt;em&gt;Ties.xcdatamodeld中操作，添加Bowtie实体，同时配置属性，为属性选取对应的数据类型，便利的可视化操作问什么不呢……^&lt;/em&gt;^&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/CoreData1_003.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Core Data also provides the option of storing arbitrary blobs of binary data directly in your data model. These could be anything from images to PDF files, or anything else that can be serialized into zeroes and ones.&lt;/p&gt;
&lt;p&gt;如果注意到每个领结都是有对应image 的，事实上coreData也支持定义二进制数据，所以可以添加一个photoData属性，类型选为BinaryData，但是这样便利的结果就是会带来急剧的消耗，根据SQLite中的使用，即便只想要一个name，内存中也会全部加载database中的内容，这样的消耗是不可接受的。&lt;/p&gt;
&lt;p&gt;Luckily, Core Data anticipates this problem.我们只需要对photoData属性进行配置Allows External Storage，如图：&lt;br&gt;&lt;img src=&quot;/img/CoreData1_004.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Allows External Storage option is only available for the binary data attribute type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you enable Allows External Storage, Core Data heuristically decides on a per-value basis if it should save the data directly in the database or store a URI that points to a separate file.当选取允许外部存储时，CoreData直接预判是否应该保存数据到database亦或是转而储存一个指向特定文件的URL。&lt;/p&gt;
&lt;p&gt;所以，目前说来 coreData 支持常见的所有基本的数据类型：In sum, besides strings, integers, doubles, Booleans and dates, Core Data can also save binary data, and it can do so efficiently and intelligently.&lt;/p&gt;
&lt;p&gt;但仅仅是这样还不够，因为更多时候我们需要能够存储自定义的类型，一般就是自定的对象，比如Demo中每个领结都有颜色，而基本类型中是没有UIColor的，Once again, Core Data has your back，在Attributes的Type中有个Transformable类型，CoreData允许所有遵循NSCoding协议的对象都可以存储。正如UIColor (UIColor conforms to NSSecureCoding, which inherits from NSCoding, so it can use the transformable type out of the box)，添加tintColor：&lt;br&gt;&lt;img src=&quot;/img/CoreData1_005.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;New, data model is now complete. The Bowtie entity has the eight attributes it needs to store all the information in SampleData.plist.&lt;/p&gt;
&lt;h4 id=&quot;secondly-managed-object-subclasses&quot;&gt;&lt;a href=&quot;#secondly-managed-object-subclasses&quot; class=&quot;headerlink&quot; title=&quot;secondly, managed object subclasses&quot;&gt;&lt;/a&gt;secondly, managed object subclasses&lt;/h4&gt;&lt;p&gt;在section1中的demo中，托管对象使用的是KVC给Person实体的name属性赋值，like this：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用KVC向属性（attribute）赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.setValue(name, forKey: &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以使用KVC但并不意味着应该用它，因为KVC的缺点也很明显，就是它的一切都依赖于字符串，The biggest problem with key-value coding is the fact that you’re accessing of data using strings instead of strongly-typed classes. This is often jokingly referred to as writing stringly typed code.&lt;/p&gt;
&lt;p&gt;As you probably know from experience, “stringly typed” code is vulnerable to silly human errors such as mistyping and misspelling. Key-value coding also doesn’t take full advantage of Swift’s type-checking and Xcode’s auto-completion. :]&lt;/p&gt;
&lt;p&gt;最好的替代方式就是在数据模型中为每个实体创建NSManagedObject子类，这就意味会存在一个着包含所有对应属性的Bowtie类，使用Xcode来生成吧&lt;/p&gt;
&lt;p&gt;Make sure you still have Bow_Ties.xcdatamodeld open, and go to Editor\Create NSManagedObject Subclass…. Select the data model and then the Bowtie entity in the next two dialog boxes, then select Swift as the language option in the final box. If you’re asked, say No to creating an Objective-C bridging header. Click Create to save the file.&lt;/p&gt;
&lt;p&gt;Bowtie看起来就是这样：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; CoreData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Similar to @dynamic in Objective-C, the @NSManaged attribute informs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;the Swift compiler that the backing store and implementation of a property&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;will be provided at runtime instead of at compile time.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The normal pattern is for a property to be backed by an instance variable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in memory. A property on a managed object is different: It’s backed by the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;managed object context, so the source of the data is not known at compile time.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bowtie&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSManagedObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// bool,double,int -&amp;gt; NSNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isFavorite: &lt;span class=&quot;type&quot;&gt;NSNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lastWorn: &lt;span class=&quot;type&quot;&gt;NSDate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rating: &lt;span class=&quot;type&quot;&gt;NSNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; searchKey: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timesWorn: &lt;span class=&quot;type&quot;&gt;NSNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; photoData: &lt;span class=&quot;type&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 二进制－&amp;gt; NSData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tintColor: &lt;span class=&quot;type&quot;&gt;AnyObject&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 可变类型－&amp;gt; AnyObject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果不想使用NSNumber，更加紧准的类型映射需要在创建类时勾选Use scalar properties for primitive data types in the last dialog，虽然这里暂时不勾选&lt;br&gt;&lt;img src=&quot;/img/CoreData1_006.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;还有很重要的一点，你需要链接Bowtie到数据模型编辑器的Bowtie实体。（脑补StoryBoard 与 view的链接）&lt;br&gt;&lt;img src=&quot;/img/CoreData1_007.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next to Class, replace Bowtie with Bow_Ties.Bowtie. This is the fully specified class name for Bowtie.swift. This last step links the runtime Bowtie class to the Bowtie entity in the data model editor.&lt;/p&gt;
&lt;p&gt;Congratulations, you’ve just made your first managed object subclass in Swift! Compared with key-value coding, this is a much better way of working with Core Data entities. There are two main benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Managed object subclasses unleash the syntactic power of Swift properties. By accessing attributes using properties instead of key-value coding, you again befriend Xcode and the compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You gain the ability to override existing methods or to add your own convenience methods. Note that there are some NSManagedObject methods you must never override. Check Apple’s documentation of NSManagedObject for a complete list.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Third-propagating-a-managed-context&quot;&gt;&lt;a href=&quot;#Third-propagating-a-managed-context&quot; class=&quot;headerlink&quot; title=&quot;Third ,propagating a managed context&quot;&gt;&lt;/a&gt;Third ,propagating a managed context&lt;/h4&gt;&lt;p&gt;传递上下文到控制器，毕竟老是用appdelegat是比较烦的，so pass the managed context from class to class via a property.&lt;/p&gt;
&lt;p&gt;在控制器中，从plist中获取数据，and insert all the bow tie data you had in SampleData.plist into Core Data&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从plist获取数据，然后插入到data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insertSampleData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;想看看这两种特殊类型是怎么保存的，如下：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// image转变为NSData保存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; photoData = &lt;span class=&quot;type&quot;&gt;UIImagePNGRepresentation&lt;/span&gt;(image)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 颜色直接用UIColor保存 － 一个专门由RGB返回颜色的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bowtie.tintColor = colorFromDict(tintColotDict)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里涉及到一个类似SQL中WHERE语句的查找的类，NSPredicate，用法简单避免了你去学习火星的正则表达式，比如要在firstName中查找’Bob’：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;type&quot;&gt;NSPredicate&lt;/span&gt; predicateWithFormat:@&lt;span class=&quot;string&quot;&gt;&quot;firstName = &#39;Bob&#39;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然这里仅仅只是查询满足“ searchKey ! = nil”（拥有searchKey）的数量，没有用到筛选功能：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 获取data中已存在数据的数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fetchRequset = &lt;span class=&quot;type&quot;&gt;NSFetchRequest&lt;/span&gt;(entityName: &lt;span class=&quot;string&quot;&gt;&quot;Bowtie&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fetchRequset.predicate = &lt;span class=&quot;type&quot;&gt;NSPredicate&lt;/span&gt;(format: &lt;span class=&quot;string&quot;&gt;&quot;searchKey ! = nil&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; = managedContest.countForFetchRequest(fetchRequset, error: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ok，保存搞定了，Now you need to access the data from somewhere！&lt;/p&gt;
&lt;p&gt;所以开始获取初始数据吧！这一步我们要完成&lt;br&gt;This is where you fetch the Bowties from Core Data and populate the UI. 在ViewDidLoad中添加获取的代码：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2 从coreData获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; request = &lt;span class=&quot;type&quot;&gt;NSFetchRequest&lt;/span&gt;(entityName: &lt;span class=&quot;string&quot;&gt;&quot;Bowtie&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; firstTitle = segmentedControl.titleForSegmentAtIndex(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;要查找seg的title［0］： \(firstTitle)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3 根据segment的tilte配置请求，然后执行查找相应数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request.predicate = &lt;span class=&quot;type&quot;&gt;NSPredicate&lt;/span&gt;(format: &lt;span class=&quot;string&quot;&gt;&quot;searchKey == %@&quot;&lt;/span&gt;,      firstTitle!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; error: &lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt;? = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = managedContest.executeFetchRequest(request, error: &amp;amp;error) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! [&lt;span class=&quot;type&quot;&gt;Bowtie&lt;/span&gt;]?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 4 根据获取结果的［Bowtie］集合，展示UI   &amp;amp;   错误处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; bowties = results &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     populate(bowties[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;未能获取\(error),\(error!.userInfo)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;populate方法就是将按照searchKey获取到的数据放入［Bowtie］集合后，负责展示到UI上，就是把该显示的UI的数据装进去，大部分没有技术含量，只挑选以下几点，需要注意的是数据的格式需要转化，如NSNumber到Bool：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 图片 － 由二进制提供&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imageView.image = &lt;span class=&quot;type&quot;&gt;UIImage&lt;/span&gt;(data: bowtie.photoData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 颜色依旧是颜色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.tintColor = bowtie.tintColor &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NSNumber -&amp;gt; bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;favoriteLabel.hidden = !bowtie.isFavorite.boolValue&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后运行，看到这样：&lt;br&gt;&lt;img src=&quot;/img/CoreData1_008.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;现在充分证明我们对CoreData数据的存，取，查都是成功的，下面来完善其他功能，为了能给当前显示的领结进行评分等操作，我们需要一个属性用以纪录当前领结，so：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 当前显示领结&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; currentBowtie: &lt;span class=&quot;type&quot;&gt;Bowtie&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后就是实现和添加wear和rate功能了，完成之后发现一个问题，就是rate我们想规定中0-5，但是直接跑到了6，通常都是考虑在代码中输入时去提示限定，但有个更简单的办法，就是利用Xcode对rate做些限定处理：&lt;br&gt;&lt;img src=&quot;/img/CoreData1_009.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要额外说明的是，绝对不要轻易version 模型设置，特别是在你已经发布版本之后，因为更新时很可能会带来严重的问题，但Attribute validation is one of the few exceptions.更多相关讨论先往后放。&lt;br&gt;当再次输入不再范围的数据时，就会有错误提升：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Optional(“R”)currentBowtie更新rate后，未能保存Optional(Error Domain=NSCocoaErrorDomain Code=1610&lt;br&gt;“The operation couldn’t be completed. (Cocoa error 1610.)”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据错误对应的处理也是必须的：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; error: &lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !managedContest.save(&amp;amp;error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果输入的评分过大或过小，评分无效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;currentBowtie更新rate后，未能保存\(error),\(error!.userInfo)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; error!.code == &lt;span class=&quot;type&quot;&gt;NSValidationDateTooLateError&lt;/span&gt; || error!.code ==      &lt;span class=&quot;type&quot;&gt;NSValidationDateTooSoonError&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          rate(currentBowtie)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     populate(currentBowtie)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样如果输入的评分不符合预期，过大或者过小评分无效就是了&lt;/p&gt;
&lt;p&gt;还剩下一点儿根据不同segumentTitle匹配不同数据的功能就不再赘述了，留一点儿练手的机会自己慢慢玩儿吧…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;CoreData-and-Swift&quot;&gt;&lt;a href=&quot;#CoreData-and-Swift&quot; class=&quot;headerlink&quot; title=&quot;CoreData and Swift&quot;&gt;&lt;/a&gt;CoreData and Swift&lt;/h6&gt;&lt;p&gt;这是这本书C
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>scrollView的一些经验（二）--自动布局的正确姿势</title>
    <link href="http://13hoop.github.io/2015/03/10/scrollView%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
    <id>http://13hoop.github.io/2015/03/10/scrollView的一些经验（二）-自动布局的正确姿势/</id>
    <published>2015-03-10T09:03:03.000Z</published>
    <updated>2016-03-30T09:25:45.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;利用storyBoard尝试自动布局ScrollView&quot;&gt;&lt;a href=&quot;#利用storyBoard尝试自动布局ScrollView&quot; class=&quot;headerlink&quot; title=&quot;利用storyBoard尝试自动布局ScrollView&quot;&gt;&lt;/a&gt;利用&lt;code&gt;storyBoard&lt;/code&gt;尝试自动布局ScrollView&lt;/h3&gt;&lt;p&gt;实际测试如下：&lt;/p&gt;
&lt;h4 id=&quot;1-scrollView-imageView（Sizefit）&quot;&gt;&lt;a href=&quot;#1-scrollView-imageView（Sizefit）&quot; class=&quot;headerlink&quot; title=&quot;1 scrollView + imageView（Sizefit）&quot;&gt;&lt;/a&gt;1 scrollView + imageView（Sizefit）&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/img/ScrollView2_001.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/ScrollView2_002.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;失败！&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-imageView修改：只有leading和TopSpace-然后再代码中添加打印：&quot;&gt;&lt;a href=&quot;#2-imageView修改：只有leading和TopSpace-然后再代码中添加打印：&quot; class=&quot;headerlink&quot; title=&quot;2 imageView修改：只有leading和TopSpace,然后再代码中添加打印：&quot;&gt;&lt;/a&gt;2 imageView修改：只有leading和TopSpace,然后再代码中添加打印：&lt;/h4&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view layoutIfNeeded]; &lt;span class=&quot;comment&quot;&gt;// 此行之前的layout被计算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;设置了imageView后 %@&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.scrollView);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/ScrollView2_003.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;失败！again&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原因分析：通过打印可看出，上述两种方法都无法给出contentSize&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 11:27:32.577 ScrollTagDemo[2393:259138] 只是设置了scrollView的约束，&amp;lt;UIScrollView: 0x7aaf1a00; frame = (190 190; 220 220); clipsToBounds = YES; autoresize = RM+BM; gestureRecognizers = &amp;lt;NSArray: 0x788a1750&amp;gt;; layer = &amp;lt;CALayer: 0x78689bb0&amp;gt;; contentOffset: &amp;#123;0, 0&amp;#125;; contentSize: &amp;#123;0, 0&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 11:27:32.579 ScrollTagDemo[2393:259138] 设置了imageView后 &amp;lt;UIScrollView: 0x7aaf1a00; frame = (50 130; 220 220); clipsToBounds = YES; autoresize = RM+BM; gestureRecognizers = &amp;lt;NSArray: 0x788a1750&amp;gt;; layer = &amp;lt;CALayer: 0x78689bb0&amp;gt;; contentOffset: &amp;#123;0, 0&amp;#125;; contentSize: &amp;#123;0, 0&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-imageView再修改，先使用代码：&quot;&gt;&lt;a href=&quot;#3-imageView再修改，先使用代码：&quot; class=&quot;headerlink&quot; title=&quot;3 imageView再修改，先使用代码：&quot;&gt;&lt;/a&gt;3 imageView再修改，先使用代码：&lt;/h4&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.scrollView.contentSize = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageView.bounds.size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;设置了contentSize的frame之后，%@&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.scrollView);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;success！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此时的打印contentSize：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 11:52:11.289 ScrollTagDemo[2460:266559] 设置了contentSize的frame之后，&amp;lt;UIScrollView: 0x7b885c00; frame = (190 190; 220 220); clipsToBounds = YES; autoresize = RM+BM; gestureRecognizers = &amp;lt;NSArray: 0x7b06a2e0&amp;gt;; layer = &amp;lt;CALayer: 0x7b064680&amp;gt;; contentOffset: &amp;#123;0, 0&amp;#125;; contentSize: &amp;#123;759, 966&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以原因的确是contentSize的问题，这种方式就是官方给出的所谓混合解决方式，但在layout中设置frame可是不常见的，在我看来这有悖于layout的实质，可用但值得商榷，那么就继续探索能够使用约束给出contentSize的方法。&lt;br&gt;再次修改imageView：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/ScrollView2_004.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;失败，again！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按理说，给定img的宽高，就应该有contentSize了，但遗憾的是木有😢&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 12:01:10.255 ScrollTagDemo[2525:271602] 设置了contentSize的frame之后，&amp;lt;UIScrollView: 0x7ca72600; frame = (190 190; 220 220); clipsToBounds = YES; autoresize = RM+BM; gestureRecognizers = &amp;lt;NSArray: 0x7c1926d0&amp;gt;; layer = &amp;lt;CALayer: 0x7c18cd80&amp;gt;; contentOffset: &amp;#123;0, 0&amp;#125;; contentSize: &amp;#123;0, 0&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-imageView再修改，这次在第二次的基础上尝试：&quot;&gt;&lt;a href=&quot;#4-imageView再修改，这次在第二次的基础上尝试：&quot; class=&quot;headerlink&quot; title=&quot;4 imageView再修改，这次在第二次的基础上尝试：&quot;&gt;&lt;/a&gt;4 imageView再修改，这次在第二次的基础上尝试：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/img/ScrollView2_005.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;success！it works！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是对比先前的&lt;br&gt;&lt;img src=&quot;/img/ScrollView2_006.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;仅仅是把Trainling跟Bottom变成了0，0而已，&lt;strong&gt;it works！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由此可见：subView的约束是根据contentSize计算而来的，而不是scroll自己！&lt;br&gt;但是但是，打印的结果仍然是：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 12:10:35.446 ScrollTagDemo[2556:281194] 设置了contentSize的frame之后，&amp;lt;UIScrollView: 0x7b075600; frame = (190 190; 220 220); clipsToBounds = YES; autoresize = RM+BM; gestureRecognizers = &amp;lt;NSArray: 0x7aa2a2f0&amp;gt;; layer = &amp;lt;CALayer: 0x7a8795f0&amp;gt;; contentOffset: &amp;#123;0, 0&amp;#125;; contentSize: &amp;#123;0, 0&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;肯定是打印的地方不对，到底在哪儿呢？再试试，通过自定义view，猜测是laySubViews，重写之后结果验证如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 13:49:47.407 ScrollTagDemo[2846:353070] 设置了imageView后 &amp;lt;UIScrollView: 0x7bbaf000; frame = (190 190; 220 220); clipsToBounds = YES; autoresize = RM+BM; gestureRecognizers = &amp;lt;NSArray: 0x7c145be0&amp;gt;; layer = &amp;lt;CALayer: 0x7b62da80&amp;gt;; contentOffset: &amp;#123;0, 0&amp;#125;; contentSize: &amp;#123;0, 0&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 13:49:47.407 ScrollTagDemo[2846:353070] 设置了contentSize的frame之后，&amp;lt;UIScrollView: 0x7bbaf000; frame = (190 190; 220 220); clipsToBounds = YES; autoresize = RM+BM; gestureRecognizers = &amp;lt;NSArray: 0x7c145be0&amp;gt;; layer = &amp;lt;CALayer: 0x7b62da80&amp;gt;; contentOffset: &amp;#123;0, 0&amp;#125;; contentSize: &amp;#123;0, 0&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 13:49:47.412 ScrollTagDemo[2846:353070] --------------&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 13:49:47.413 ScrollTagDemo[2846:353070] timeOfLayout 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 13:49:47.413 ScrollTagDemo[2846:353070] scrollView.contentSize:&amp;#123;0, 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 2015-03-11 13:49:47.413 ScrollTagDemo[2846:353070] --------------&amp;gt; --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 13:49:47.413 ScrollTagDemo[2846:353070] timeOfLayout 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 13:49:47.413 ScrollTagDemo[2846:353070] scrollView.contentSize:&amp;#123;759, 966&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在整个viewDidLoad中都没有计算contentSize，而是在结束之后由系统去view的 layoutSubviews方法中计算的&amp;lt;在iOS8之前是要自己去加上一句的&amp;gt;！&lt;/p&gt;
&lt;h4 id=&quot;5-再测试：&quot;&gt;&lt;a href=&quot;#5-再测试：&quot; class=&quot;headerlink&quot; title=&quot;5 再测试：&quot;&gt;&lt;/a&gt;5 再测试：&lt;/h4&gt;&lt;p&gt;imageView再添加约束，让其的w和h 跟 scrollView的w和h 相等&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/ScrollView2_007.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;also worked!&lt;/strong&gt;&lt;br&gt;打印输出：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 15:52:42.841 ScrollTagDemo[3154:467930] --------------&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 15:52:42.841 ScrollTagDemo[3154:467930] timeOfLayout 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 15:52:42.884 ScrollTagDemo[3154:467930] scrollView.frame:&amp;#123;&amp;#123;250, 190&amp;#125;, &amp;#123;100, 220&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 15:52:42.884 ScrollTagDemo[3154:467930] scrollView.contentSize:&amp;#123;0, 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 15:52:42.885 ScrollTagDemo[3154:467930] --------------&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 15:52:42.885 ScrollTagDemo[3154:467930] timeOfLayout 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 15:52:42.885 ScrollTagDemo[3154:467930] scrollView.frame:&amp;#123;&amp;#123;250, 190&amp;#125;, &amp;#123;100, 220&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015-03-11 15:52:42.885 ScrollTagDemo[3154:467930] scrollView.contentSize:&amp;#123;759, 966&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发现根本 scrollView.frame就没有变化，但是这明显与通常理解的矛盾，明明已经相等而数值不同，其实这就是系统针对scrollView做的特殊处理，其实并没有真正去加上这个约束，加的其实是：&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;&lt;a href=&quot;#finally&quot; class=&quot;headerlink&quot; title=&quot;finally&quot;&gt;&lt;/a&gt;finally&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/img/ScrollView2_008.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这就是scrollView的完整约束！这也就是在官方文档中所提到的&lt;strong&gt;“by creating constraints between the view and a view outside the scroll view’s subtree, such as the scroll view’s superview”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/ScrollView2_009.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将这个所谓相等的约束引用更改，就能结合代码更改contentSize&lt;/p&gt;
&lt;p&gt;脑洞：既然结果显示w和h可以设置为“&amp;gt;=”，是否意味着可以自己来设置这样的约束对方，没实验，不过估计即便可以也不会有人去这样设置的👌！……^_^&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;利用storyBoard尝试自动布局ScrollView&quot;&gt;&lt;a href=&quot;#利用storyBoard尝试自动布局ScrollView&quot; class=&quot;headerlink&quot; title=&quot;利用storyBoard尝试自动布局ScrollView&quot;&gt;&lt;/a&gt;利用
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>scrollView的一些经验（一）</title>
    <link href="http://13hoop.github.io/2015/03/08/about/"/>
    <id>http://13hoop.github.io/2015/03/08/about/</id>
    <published>2015-03-08T12:38:03.000Z</published>
    <updated>2016-03-30T08:53:33.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;scrollView的一些经验（一）&quot;&gt;&lt;a href=&quot;#scrollView的一些经验（一）&quot; class=&quot;headerlink&quot; title=&quot;scrollView的一些经验（一）&quot;&gt;&lt;/a&gt;scrollView的一些经验（一）&lt;/h2&gt;&lt;h4 id=&quot;scrollView，默认不会滚动&quot;&gt;&lt;a href=&quot;#scrollView，默认不会滚动&quot; class=&quot;headerlink&quot; title=&quot;scrollView，默认不会滚动&quot;&gt;&lt;/a&gt;scrollView，默认不会滚动&lt;/h4&gt;&lt;p&gt;因为：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; contentOffset: &lt;span class=&quot;type&quot;&gt;CGPoint&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// default CGPointZero&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; contentSize: &lt;span class=&quot;type&quot;&gt;CGSize&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// default CGSizeZero&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;scrollView的layout&quot;&gt;&lt;a href=&quot;#scrollView的layout&quot; class=&quot;headerlink&quot; title=&quot;scrollView的layout&quot;&gt;&lt;/a&gt;scrollView的layout&lt;/h4&gt;&lt;p&gt;scrollView的layout，如果只设置其subViews为&lt;code&gt;leading/trailing/top/bottom&lt;/code&gt;的话，是没有效果的也不会滚动，因为默认是没有contentSize的，如果想用纯sb的话，你需要制定一个确定大小的辅助性view（有width和height），只有这样才能自动计算contentSize，正如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用 UIScrollView 和它 subview 的 leading/trailing/top/bottom 来互相决定大小的时候，会出现「Has ambiguous scrollable content width/height」的 warning正确的姿势是用 UIScrollView 外部的 view 或 UIScrollView 本身的 width/height 确定 subview 的尺寸，进而确定 contentSize。因为 UIScrollView 本身的 leading/trailing/top/bottom 变得不好用，所以我习惯的做法是在 UIScrollView 和它原来的 subviews 之间增加一个 content view。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;其实官方对这些问题已做了说明：&quot;&gt;&lt;a href=&quot;#其实官方对这些问题已做了说明：&quot; class=&quot;headerlink&quot; title=&quot;其实官方对这些问题已做了说明：&quot;&gt;&lt;/a&gt;其实官方对这些问题已做了说明：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/img/ScrollView1_001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;设计scrollView的核心便是对于content 的scroll方式的展示，这就意味着content size是最重要的，而自己本身的bounds与content size没有任何关系。所以理论上，只要所加的约束能最终计算出content size就没有问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/ScrollView1_002.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以常常在scrollView中率先添加一个辅助性的contentView，然后再在辅助性的视图上添加下一层级的视图，对比衍生自scrollView的tableView和collectionView，我们甚至可以推断一条这样的结论：对于scrollView 的直接子试图最好只有一个！&lt;br&gt;官方的小demo：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *scrollView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; *imageView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *viewsDictionary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Create the scroll view and the image view.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scrollView  = [[&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imageView = [[&lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Add an image to the image view.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [imageView setImage:[&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageNamed:&lt;span class=&quot;string&quot;&gt;&quot;MyReallyBigImage&quot;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Add the scroll view to our view.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:scrollView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Add the image view to the scroll view.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [scrollView addSubview:imageView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Set the translatesAutoresizingMaskIntoConstraints to NO so that the views autoresizing mask is not translated into auto layout constraints.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scrollView.translatesAutoresizingMaskIntoConstraints  = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imageView.translatesAutoresizingMaskIntoConstraints = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Set the constraints for the scroll view and the image view.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    viewsDictionary = &lt;span class=&quot;built_in&quot;&gt;NSDictionaryOfVariableBindings&lt;/span&gt;(scrollView, imageView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addConstraints:[&lt;span class=&quot;built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; constraintsWithVisualFormat:&lt;span class=&quot;string&quot;&gt;@&quot;H:|[scrollView]|&quot;&lt;/span&gt; options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; metrics: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; views:viewsDictionary]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addConstraints:[&lt;span class=&quot;built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; constraintsWithVisualFormat:&lt;span class=&quot;string&quot;&gt;@&quot;V:|[scrollView]|&quot;&lt;/span&gt; options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; metrics: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; views:viewsDictionary]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [scrollView addConstraints:[&lt;span class=&quot;built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; constraintsWithVisualFormat:&lt;span class=&quot;string&quot;&gt;@&quot;H:|[imageView]|&quot;&lt;/span&gt; options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; metrics: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; views:viewsDictionary]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [scrollView addConstraints:[&lt;span class=&quot;built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; constraintsWithVisualFormat:&lt;span class=&quot;string&quot;&gt;@&quot;V:|[imageView]|&quot;&lt;/span&gt; options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; metrics: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; views:viewsDictionary]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* the rest of your code here... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;猜测是：通过img给出了imgV的W和H，下一篇就用&lt;code&gt;storyboard&lt;/code&gt;来试试&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;scrollView的一些经验（一）&quot;&gt;&lt;a href=&quot;#scrollView的一些经验（一）&quot; class=&quot;headerlink&quot; title=&quot;scrollView的一些经验（一）&quot;&gt;&lt;/a&gt;scrollView的一些经验（一）&lt;/h2&gt;&lt;h4 id=&quot;s
    
    </summary>
    
    
  </entry>
  
</feed>
